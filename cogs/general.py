import platform
import random
import os
import aiosqlite

import aiohttp
import discord
from discord import app_commands
from discord.ext import commands
from discord.ext.commands import Context

from helpers import checks

VISIBLE_COGS = ["general", "fun", "moderation", "music"]

class General(commands.Cog, name="general"):
    def __init__(self, bot):
        self.bot = bot
  
    @commands.hybrid_command(
        name="help", description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥."
    )
    @checks.not_blacklisted()
    async def help(self, context: Context) -> None:
        if not context.guild:
          servercheck = "–ü—Ä–µ—Ñ–∏–∫—Å:"
          prefix = "q."
        else:
          servercheck = "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:"
          guild = context.guild.id
          async with aiosqlite.connect(f"{os.path.realpath(os.path.dirname(__file__))}/../database/database.db") as db:
            async with db.cursor() as cursor:
              await cursor.execute('SELECT prefix_id FROM prefixes WHERE server_id=?', (guild,))
              data = await cursor.fetchone()
              prefix = ''.join(data)    
      
        embed = discord.Embed(
            title="–ü–æ–º–æ—â—å", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ:", color=0x9C84EF
        )
        embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü:", value="Qaveru#3999", inline=True)
        embed.add_field(
            name="–í–µ—Ä—Å–∏—è Python:", value=f"{platform.python_version()}", inline=True
        )
        embed.add_field(
            name=f"{servercheck}",
            value=f"`/` –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n `{prefix}` –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
            inline=False,
        )
        for i in self.bot.cogs:
            cog = self.bot.get_cog(i.lower())
            commands = cog.get_commands()  
            data = []           
            if cog is None or cog.qualified_name.lower() not in VISIBLE_COGS:
                continue
            for command in commands:
                description = command.description.partition("\n")[0]
                data.append(f"{command.name} - {description}")
            help_text = "\n".join(data)
            embed.add_field(
                name=f"–ö–æ–º–∞–Ω–¥—ã {i.capitalize()}", value=f"```{help_text}```", inline=False
            )
        await context.send(embed=embed)

    @commands.hybrid_command(
        name="serverinfo",
        description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ.",
    )
    @checks.not_blacklisted()
    async def serverinfo(self, context: Context) -> None:
        roles = [role.name for role in context.guild.roles]
        if len(roles) > 50:
            roles = roles[:50]
            roles.append(f">>>> –í—Å–µ–≥–æ[50/{len(roles)}] —Ä–æ–ª–µ–π")
        roles = ", ".join(roles)

        embed = discord.Embed(
            title=f"{context.guild}", color=0x9C84EF
        )
        if context.guild.icon is not None:
            embed.set_thumbnail(url=context.guild.icon.url)
        embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü", value=context.guild.owner)
        embed.add_field(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", value=context.guild.member_count)
        embed.add_field(name="ID –°–µ—Ä–≤–µ—Ä–∞", value=context.guild.id)
        embed.add_field(name="–í—Å–µ–≥–æ \n–∫–∞–Ω–∞–ª–æ–≤", value=f"{len(context.guild.channels)}")
        embed.add_field(name="–¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", value=f"{len(context.guild.text_channels)}")
        embed.add_field(name="–ì–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", value=f"{len(context.guild.voice_channels)}")
        embed.add_field(name=f"–°–ø–∏—Å–æ–∫ –†–æ–ª–µ–π ({len(context.guild.roles)})", value=roles)
        embed.set_footer(text=f"–°–µ—Ä–≤–µ—Ä –°–æ–∑–¥–∞–Ω: {context.guild.created_at}")
        await context.send(embed=embed)

    @commands.hybrid_command(
        name="ping",
        description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—é –∑–∞–¥–µ—Ä–∂–∫—É.",
    )
    @checks.not_blacklisted()
    async def ping(self, context: Context) -> None:
        embed = discord.Embed(
            title="üèì –ü–æ–Ω–≥!",
            description=f"–ú–æ—è –∑–∞–¥–µ—Ä–∂–∫–∞ {round(self.bot.latency * 1000)}–º—Å.",
            color=0x9C84EF,
        )
        await context.send(embed=embed)

    @commands.hybrid_command(
        name="invite",
        description="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–µ–Ω—è –∫ —Å–µ–±–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
    )
    @checks.not_blacklisted()
    async def invite(self, context: Context) -> None:
        embed = discord.Embed(
            description=f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –º–µ–Ω—è –Ω–∞–∂–∞–≤ [—Å—é–¥–∞](https://discordapp.com/oauth2/authorize?&client_id={self.bot.config['application_id']}&scope=bot+applications.commands&permissions={self.bot.config['permissions']}).",
            color=0xD75BF4,
        )
        await context.send(embed=embed)

    @commands.hybrid_command(
        name="support",
        description="–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–π —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é.",
    )
    @checks.not_blacklisted()
    async def support(self, context: Context) -> None:
        embed = discord.Embed(
            description="–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–º–æ—â—å –Ω–∞ –º–æ—ë–º [—Å–µ—Ä–≤–µ—Ä–µ](https://discord.gg/a428KzFC9X).",
            color=0xD75BF4,
        )
        await context.send(embed=embed)

    @commands.hybrid_command(
        name="8ball",
        description="–°–ø—Ä–æ—Å–∏—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å —É –º–µ–Ω—è.",
    )
    @checks.not_blacklisted()
    @app_commands.describe(question="–í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å.")
    async def eight_ball(self, context: Context, *, question: str) -> None:
        answers = [
            "–≠—Ç–æ —Ç–æ—á–Ω–æ.",
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ.",
            "–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è.",
            "–î–∞, –±–µ–∑—É—Å–ª–æ–≤–Ω–æ.",
            "–ö–∞–∫ —è –≤–∏–∂—É, –¥–∞.",
            "–í–µ—Ä–æ—è—Ç–Ω–æ.",
            "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ —Ö–æ—Ä–æ—à–∞—è.",
            "–î–∞.",
            "–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –¥–∞.",
            "–û—Ç–≤–µ—Ç —Ç—É–º–∞–Ω–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "–°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∑–∂–µ.",
            "–°–µ–π—á–∞—Å –ª—É—á—à–µ –í–∞–º –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å.",
            "–ù–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å.",
            "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∑–∂–µ.",
            "–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ.",
            "–ú–æ–π –æ—Ç–≤–µ—Ç –Ω–µ—Ç.",
            "–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç.",
            "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –Ω–µ –æ—á–µ–Ω—å.",
            "–û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.",
        ]
        embed = discord.Embed(
            title="**–ú–æ–π –æ—Ç–≤–µ—Ç:**",
            description=f"{random.choice(answers)}",
            color=0x9C84EF,
        )
        embed.set_footer(text=f"–í–æ–ø—Ä–æ—Å –±—ã–ª: {question}")
        await context.send(embed=embed)

    @commands.hybrid_command(
        name="bitcoin",
        description="–ü–æ–ª—É—á–∏—Ç—å –Ω—ã–Ω–µ—à–Ω—É—é —Ü–µ–Ω—É –±–∏—Ç–∫–æ–∏–Ω–∞.",
    )
    @checks.not_blacklisted()
    async def bitcoin(self, context: Context) -> None:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                "https://api.coindesk.com/v1/bpi/currentprice/BTC.json"
            ) as request:
                if request.status == 200:
                    data = await request.json(
                        content_type="application/javascript"
                    ) 
                    embed = discord.Embed(
                        title="–¶–µ–Ω–∞ –ë–∏—Ç–∫–æ–∏–Ω–∞",
                        description=f"–¶–µ–Ω–∞ –±–∏—Ç–∫–æ–∏–Ω–∞ —Å–µ–π—á–∞—Å {data['bpi']['USD']['rate']} –¥–æ–ª–ª–∞—Ä–æ–≤",
                        color=0x9C84EF,
                    )
                else:
                    embed = discord.Embed(
                        title="–û—à–∏–±–∫–∞!",
                        description="–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å API, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                        color=0xE02B2B,
                    )
                await context.send(embed=embed)

async def setup(bot):
    await bot.add_cog(General(bot))
